
######################## Registration  #####################################


@csrf_protect
def register(request,reqid):
   
    if request.method == 'POST':
        #fetch all data from html page
        email = request.POST['email']
        institute = request.POST.get('Institute','')
        title = request.POST.get('title','')
        first_name = request.POST.get('fname','')
        last_name = request.POST.get('lname','')
        password1 = request.POST.get('password1','')
        password2 = request.POST.get('password2','')
        exp = request.POST.get('experience','')
        gender = request.POST.get('gender','')
        desg = request.POST.get('Desg','')
        qual = request.POST.get('Qual','')
        stream = request.POST.get('stream','')
        phone_per = request.POST.get('phone1','')
        phone_office = request.POST.get('phone2','')
        tos= request.POST.get('terms_of_service','')
        
        # Validations : 
        #Two password fields : Both fields should be Same
        #tos filed should be checked : Kindly Agree to the Terms and Conditions
    
        #fetch institute id : 
        #interface = RequestedUsers.objects.filter(id=reqid)
        
        reqobj = RequestedUsers.objects.filter(id=reqid)
        reqobj1 = reqobj[0]
        
        insid=reqobj1.instituteid_id
        courseid = reqobj1.courseid_id
        roleid = reqobj1.roleid
        email = reqobj1.email
        
        #tid=sid=did=0
        
        lookobj = Lookup.objects.filter(description=title)
        #if lookobj:
        tid=lookobj[0].code
        lookobj = Lookup.objects.filter(description=stream)
        #if lookobj:
        sid=lookobj[0].code
        lookobj = Lookup.objects.filter(description=desg)
        #if lookobj:
        did=lookobj[0].code
    	
        interface_obj = Personinformation(titleid=tid,designation=did,streamid=sid,instituteid_id=insid,email=email,firstname=first_name,lastname=last_name,experience=exp,gender=gender,qualification=qual) #telephone1=phone_per,telephone2=phone_office
        interface_obj.save()
        
        obj2 = Userlogin ( usertypeid=1,email=email,password=password1) # 1 means IITBOMBAYX Partner system
        obj2.save()
        
        per = Personinformation.objects.filter(email=email)
        personid=per[0].id
        
        interface = RequestedUsers.objects.filter(id=reqid)  
        roleid = interface[0].roleid        
        courseid = interface[0].courseid_id
        
        #After Successfull Registeration , Status in Requestedusers table is changed to Registered
        RequestedUsers.objects.filter(id=reqid).update(status="Registered")
        
        
        if roleid==4 or roleid==5:  #If Register page Filled By Course_Level_User
            obj4=Courselevelusers(courseid_id=courseid,roleid=roleid,personid_id=personid,instituteid_id=insid,startdate=date.today(),enddate="4712-12-31")
            obj4.save()
        else:   #If Register page Filled By Institute_Level_User
            obj4=Institutelevelusers(instituteid_id=insid,roleid=roleid,personid_id=personid,startdate=date.today())
            obj4.save()
            
        clickon=""
        link=""
        head_message="You Have Successfully Registered !!!"
        message1="Click on the Login button to Log into your account "
        Context={'head_message':head_message,'message1':message1,'link':link,'clickon':clickon}
        return render_to_response('home.html',Context,context_instance=RequestContext(request))
    
    
    ''' FIRST CHECK FOR VALID USER '''
    Context = Validate_user_registration(request,reqid)    
    
    if Context:
        return render_to_response('home.html',Context,context_instance=RequestContext(request))
   
    reqobj = RequestedUsers.objects.filter(id=reqid)
    reqobj1=reqobj[0]
    insid=reqobj1.instituteid_id
    insobj=T10KT_Institute.objects.filter(instituteid=insid)
    institute=insobj[0].institutename
    
    desgid=reqobj1.designation
    print desgid
    fname=reqobj1.firstname
    lname=reqobj1.lastname    
    emailid=reqobj1.email
    
    desig =Lookup.objects.values('description','category','code')
    designations=[]
    qual_list=[]
    title_list=[]
    stream_list=[]
    
    for row in desig:
        if(row['category']=="Designation"):
            designations.append(row['description'])  # i['is_active'] gives me value coreesponding to description key
            if row['code']==desgid:
                desg=row['description']
        if(row['category']=="Qualification"):
            qual_list.append(row['description'])
        if row['category']=="ParticipantTitle":
            title_list.append(row['description'])
        if row['category']=="Stream":
            stream_list.append(row['description'])
            
    Context = {'fname':fname,'lname':lname,'desg' : desg ,'emailid' : emailid,'institute' : institute, 'desg_list': designations,'qual_list' : qual_list,'title_list' : title_list,'stream_list' : stream_list}  
    args = {}
    args.update(csrf(request))
    return render_to_response(
    'registration/Registeration.html',Context, context_instance=RequestContext(request))
 

def auth_register(request,appinsid):
   
    if request.method == 'POST':
        #fetch all data from html page
        email = request.POST['email']
        institute = request.POST.get('Institute','')
        title = request.POST.get('title','')
        first_name = request.POST.get('fname','')
        last_name = request.POST.get('lname','')
        password1 = request.POST.get('password1','')
        password2 = request.POST.get('password2','')
        exp = request.POST.get('experience','')
        gender = request.POST.get('gender','')
        desg = request.POST.get('Desg','')
        qual = request.POST.get('Qual','')
        stream = request.POST.get('stream','')
        phone_per = request.POST.get('phone1','')
        phone_office = request.POST.get('phone2','')
        tos= request.POST.get('terms_of_service','')
       
        ''' fetch ids from lookup table ( code ) '''
        lookobj = Lookup.objects.filter(description=title)
        tid=lookobj[0].code
        lookobj = Lookup.objects.filter(description=stream)
        sid=lookobj[0].code
        lookobj = Lookup.objects.filter(description=desg)
        did=lookobj[0].code
    	
	insobj = T10KT_Institute.objects.filter(institutename=institute)
    	insid=insobj[0].instituteid
    
        ''' Fill all details in tables '''
        interface_obj = Personinformation(titleid=tid,designation=did,streamid=sid,instituteid_id=insid,email=email,firstname=first_name,lastname=last_name,experience=exp,gender=gender,telephone1=phone_per,telephone2=phone_office,qualification=qual)
        interface_obj.save()
        
        obj2 = Userlogin ( usertypeid=1,email=email,password=password1) # 1 means IITBOMBAYX Partner system
        obj2.save()
        
        per = Personinformation.objects.filter(email=email)
        personid=per[0].id
        
        rcobj=T10KT_Remotecenter.objects.filter(instituteid=insid)
        rcid=rcobj[0].remotecenterid
        
        #After Successfull Registeration , update approvedinstitute table columns
        T10KT_Approvedinstitute.objects.filter(id=appinsid).update(remotecenterid=rcid,instituteid=insid)
        
        obj4=Institutelevelusers(instituteid_id=insid,roleid=2,personid_id=personid,startdate=date.today(),enddate=date.today() + timedelta(days=7)) #roleid is hardcoded with value=2 as this is only for HOI
        obj4.save()
            
        clickon=""
        link=""
        head_message="You Have Successfully Registered !!!"
        message1="Click on the Login button to Log into your account "
        Context={'head_message':head_message,'message1':message1,'link':link,'clickon':clickon}
        return render_to_response('home.html',Context,context_instance=RequestContext(request))
    
   
    
    #fetch email from table using appinsid in url
    appinsobj = T10KT_Approvedinstitute.objects.filter(id=appinsid)
    appins1=appinsobj[0]
    email=appins1.heademail
    
    #not validating the user for now ( have to validate him)  
    # validate user
    perobj=Personinformation.objects.filter(email=email)
    if perobj: 
	head_message="You Have Already Registered , Click on Login button to log-in !!!"
        message1=""
	Context={'head_message':head_message,'message1':message1}
	return render_to_response('home.html',Context,context_instance=RequestContext(request))
    else:

	    #get all state list
	    stateobj = T10KT_State.objects.values('state')
	    states=[]
	    for row in stateobj:
		states.append(row['state'])
	    
	    institute_list = []
	    insobj=T10KT_Institute.objects.all()
	    for row in insobj:
		institute_list.append(row.institutename)     
	    institute_list.sort()
	   
	    ''' get all dropdowns '''
	    desig =Lookup.objects.values('description','category','code')
	    designations=[]
	    qual_list=[]
	    title_list=[]
	    stream_list=[]
	    
	    for row in desig:
		if(row['category']=="Designation"):
		    designations.append(row['description'])  # i['is_active'] gives me value coreesponding to description key
		if(row['category']=="Qualification"):
		    qual_list.append(row['description'])
		if row['category']=="ParticipantTitle":
		    title_list.append(row['description'])
		if row['category']=="Stream":
		    stream_list.append(row['description'])
		    
	    Context = {'state_list':states,'emailid' : email , 'institute_list':institute_list , 'desg_list': designations,'qual_list' : qual_list,'title_list' : title_list,'stream_list' : stream_list}  
	    args = {}
	    args.update(csrf(request))
	    return render_to_response(
	    'registration/auth_register.html',Context, context_instance=RequestContext(request))
	   

 
def request_verification_success(request,reqid):
	# Update status to requested
	
	requserobj = RequestedUsers.objects.filter(id=reqid)
        
	Context =  Validate_register(requserobj[0].email)
	
	if Context:
            return render_to_response('home.html',Context,context_instance=RequestContext(request))
        
	RequestedUsers.objects.filter(id=reqid).update(status="Requested")
	
	#send email its higher authorities
	head_message="You Have Successfully Requested For Registeration !!!"
	#link = '/register/%s' % reqid
	#clickon="Click here"
	#message1="This link will be sent to the user after approval from the Authorities \n \n The link is  %s!!!" % link
	Context={'head_message':head_message}
	return render_to_response('home.html',Context,context_instance=RequestContext(request))


def requestregister(request):
    if request.method == 'POST':
	email = request.POST.get('email','')
	#if user has already sent a request but not yet registered. i.e pending state
        Context = Validate_register(email)
        
        if Context:
            return render_to_response('home.html',Context,context_instance=RequestContext(request))
        
        state = request.POST.get('state','')
        institute = request.POST.get('Institute','')
        rcid = request.POST.get('rcid','')
        first_name = request.POST.get('fname','')
        last_name = request.POST.get('lname','')
        email = request.POST.get('email','')
        course = request.POST.get('Course','')
        role = request.POST.get('role','')
        desg = request.POST.get('Desg','')
    
        #else enter data into database
	
	insobj=T10KT_Institute.objects.filter(institutename=institute)
	instituteid = insobj[0].instituteid

        rcobj = T10KT_Remotecenter.objects.filter(instituteid_id=instituteid)
        rcid = rcobj[0].remotecenterid
        
        stateobj = T10KT_State.objects.filter(state=state)
        stid = stateobj[0].id
        
        courseobj = edxcourses.objects.filter(course=course)
        courseid = courseobj[0].id
             
        lookupobj = Lookup.objects.filter(description=desg) 
        desigid = lookupobj[0].code
                
        lookobj = Lookup.objects.filter(description=role)
        roleid=lookobj[0].code
       
        interface_obj = RequestedUsers(createdon="0001-01-01",updatedon="0001-01-01",roleid=roleid,state=state,instituteid_id=instituteid,remotecenterid_id=rcid,firstname=first_name,lastname=last_name,email=email,courseid_id=courseid,designation=desigid,status="Verification_pending") 
        interface_obj.save()
       	
        # Fetch RequestedUsers ID from the table
        requserobj = RequestedUsers.objects.filter(email=email)
        reqid=requserobj[0].id
       
       # Update status to requested
       # RequestedUsers.objects.filter(id=reqid).update(status="Requested")
               
        args = {}
        args.update(csrf(request))
  
	#"send him to verification page"
	head_message="Title: Registration Initiated! <br> Dear %s ,  You have initiated registration on IIT Bombayx Partners Portal Please verify your email address by clicking the VERIFICATION LINK mailed to you. If you don't get the verification email CLICK HERE  After verification, an approval email will be sent to your institute registered Program Coordinator.!!!</html>" % first_name
	#This link will be of a request_success page
	#From click here one more email will go similarly
	
	Context={'head_message':head_message}
	print head_message

	''' email content table id to be fetched '''
	#emailcontentid = fetch id from content table where systype="Registration",page="Request_registration"
	send_email(1,reqid, email)
	return render_to_response('home.html',Context,context_instance=RequestContext(request))

        
    ''' GET METHOD '''
    #ALl states in list
    
    stateobj = T10KT_State.objects.values('state')
    states=[]
    for row in stateobj:
        states.append(row['state'])
    
 
    #All approved institute names in list 
    institute_list=[]
    appinsobj=T10KT_Approvedinstitute.objects.all()
    
    for row in appinsobj:
	if row.instituteid_id :# if institute has approved then only fetch its institutes name
        	institute_list.append(row.instituteid.institutename)     
    institute_list.sort()
     

    #All courses from edxcourses in list      
    courseobj = edxcourses.objects.values('course')
    courses=[]
    for row in courseobj:
        courses.append(row['course'])
    

    # Designations list
    designations=[]
    lookupobj=Lookup.objects.filter(category="Designation")
    for row in lookupobj:
        designations.append(row.description)        
    

    Context = {'state_list' : states  , 'institute_list':institute_list , 'course_list' :courses , 'desg_list' : designations}

    args = {}
    args.update(csrf(request))
    return render_to_response("registration/requestregistration.html",Context, context_instance=RequestContext(request))
   

###########################################################################################################

######################################## End of Registration ###########################################################



